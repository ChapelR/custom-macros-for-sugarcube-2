// bars.min.js, for SugarCube 2, by Chapel
;!function(){"use sctrict";var i={full:"#2ECC40",empty:"#FF4136",back:"#DDDDDD",height:"10px",width:"180px",animate:400,easing:"swing"};function n(t,a){if(!(this instanceof n))return new n(t,a);this.settings=Object.assign(i,t),a=Number(a),Number.isNaN(a)&&(a=1),a=Math.clamp(a,0,1),this.value=a;var e=$(document.createElement("div")).addClass("chapel-bar").attr("data-val",a).css({"background-color":this.settings.back,height:this.settings.height,width:this.settings.width}),r=$(document.createElement("div")).addClass("bar-top").css({"background-color":this.settings.full,opacity:this.value,width:"100%",height:"100%"}),s=$(document.createElement("div")).addClass("bar-bottom").css({"background-color":this.settings.empty,opacity:1,width:100*this.value+"%",height:"100%"}).append(r).appendTo(e);this.$element=e,this.$bars={top:r,bottom:s}}n.is=function(t){return t instanceof n},Object.assign(n.prototype,{constructor:n,width:function(){var t=this;return this.$bars.bottom.animate({width:100*this.value+"%"},this.settings.animate,this.settings.easing,function(){t.$element.trigger(":bar-animation-complete")}),this},color:function(){return this.$bars.top.animate({opacity:this.value},this.settings.animate,this.settings.easing),this},animate:function(){return this.width().color()},val:function(t){return void 0!==t&&(t=Number(t),Number.isNaN(t)&&(t=1),t=Math.clamp(t,0,1),this.value=t,this.animate()),this.value},settings:function(t){return t&&"object"==typeof t&&Object.assign(this.settings,t),this.settings},unwrap:function(){return this.$element[0]},place:function(t,a){var e=$(document.createElement("span"));return t instanceof jQuery||(t=$(t)),t[0]||console.warn("bar#place() -> no valid target"),a&&"object"==typeof a&&(a.classes&&(Array.isArray(a.classes)||"string"==typeof a.classes)&&e.addClass(a.classes),a.attr&&"object"==typeof a.attr&&e.attr(a.attr)),t.append(e.append(this.$element)),this},clone:function(){return new n(this.settings,this.value)},toJSON:function(){return JSON.reviveWrapper("new setup.Bar("+JSON.stringify(this.settings)+", "+this.value+")")}}),setup.Bar=n,window.Bar=window.Bar||n,Macro.add("newbar",{tags:["barcolors","barsizing","baranimation"],handler:function(){if(this.args.length<1)return this.error("The `<<bar>>` macro requires at least one argument: the variable name to store the bar in.");var t=this.args[0],a=null,e=null,r=null;if("$"!==t[0]&&"_"!==t[0])return this.error("Invalid variable name.");this.payload.length&&(a=this.payload.find(function(t){return"barcolors"===t.name}),e=this.payload.find(function(t){return"barsizing"===t.name}),r=this.payload.find(function(t){return"baranimation"===t.name}));var s={};if(a){if(!a.args.length)return this.error("No arguments passed to the `<<barcolors>>` tag.");switch(a.args.length){case 1:s.empty=a.args[0],s.ful="transparent";break;case 2:s.full=a.args[0],s.empty=a.args[1];break;default:s.full=a.args[0],s.empty=a.args[1],s.back=a.args[3]}}if(e){if(!e.args.length)return this.error("No arguments passed to the `<<barcolors>>` tag.");s.width=e.args[0],e.args[1]&&(s.height=e.args[1])}if(r){if(!r.args.length)return this.error("No arguments passed to the `<<baranimation>>` tag.");if("boolean"!=typeof r.args[0]||r.args[0]){if("string"!=typeof r.args[0])return this.error("The argument to the `<<baranimation>>` tag should be `true`, `false`, or a valid CSS time value.");s.animate=Util.fromCssTime(r.args[0])}else s.animate=0;r.args[1]&&["swing","linear"].includes(r.args[1])&&(s.easing=r.args[1])}State.setVar(t,new n(s,this.args[1]))}}),Macro.add("showbar",{handler:function(){if(this.args.length<1)return this.error("This macro requires at least one argument: the variable name.");var t=this.args[0];if("$"!==t[0]&&"_"!==t[0])return this.error("Invalid variable name.");var a=State.getVar(t);if(!n.is(a))return this.error('The variable "'+t+'" does not contain a bar.');a.val(this.args[1]),a.place(this.output,{classes:"macro-"+this.name,attr:{id:"bar-"+Util.slugify(t)}})}}),Macro.add("updatebar",{handler:function(){if(this.args.length<2)return this.error("This macro requires two arguments: the variable name and a value.");var t=this.args[0];if("$"!==t[0]&&"_"!==t[0])return this.error("Invalid variable name.");var a=State.getVar(t);if(!n.is(a))return this.error('The variable "'+t+'" does not contain a bar.');a.val(this.args[1])}})}();
// end bars.min.js