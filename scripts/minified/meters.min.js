// meters.min.js, for SugarCube 2, by Chapel
;!function(){"use sctrict";var n={full:"#2ECC40",empty:"#FF4136",back:"#DDDDDD",height:"12px",width:"180px",animate:400,easing:"swing",text:"#111111",label:"",align:"center"},o=["center","left","right"],l=["swing","linear"];function h(t,e){return t&&"string"==typeof t&&(t=t.toLowerCase().trim())||e||""}function g(t,e){if(!(this instanceof g))return new g(t,e);this.settings=Object.assign(n,t),this.settings.align=h(this.settings.align),this.settings.easing=h(this.settings.easing),o.includes(this.settings.align)||(this.settings.align="center"),l.includes(this.settings.easing)||(this.settings.easing="swing"),e=Number(e),Number.isNaN(e)&&(e=1),e=Math.clamp(e,0,1),this.value=e;var i=$(document.createElement("div")).addClass("chapel-meter").attr({"data-val":e,"data-label":this.settings.label}).css({"background-color":this.settings.back,height:this.settings.height,width:this.settings.width,overflow:"hidden"}),s=$(document.createElement("div")).addClass("meter-label").css({"font-size":this.settings.height,"font-weight":"bold","line-height":"100%",width:this.settings.width,"text-align":this.settings.align,color:this.settings.text,"z-index":1,position:"relative",bottom:"100%"}).wiki(this.settings.label),a=$(document.createElement("div")).addClass("meter-top").css({"background-color":this.settings.full,opacity:this.value,width:"100%",height:"100%","z-index":0}),r=$(document.createElement("div")).addClass("meter-bottom").css({"background-color":this.settings.empty,opacity:1,width:100*this.value+"%",height:"100%"}).append(a,s).appendTo(i);this.$element=i,this.$bars={top:a,bottom:r},(this.$label=s).css("font-size",i.height())}g.is=function(t){return t instanceof g},g._emit=function(t,e){g.is(t)&&t.$element.trigger({type:":"+e,meter:t})},Object.assign(g.prototype,{constructor:g,_label:function(){return this.$label.empty().wiki(this.settings.label),this.$label.css("font-size",this.$element.height()),this},_width:function(){var t=this;return this.$bars.bottom.animate({width:100*this.value+"%"},this.settings.animate,this.settings.easing,function(){g._emit(t,"meter-animation-complete")}),this},_color:function(){return this.$bars.top.animate({opacity:this.value},this.settings.animate,this.settings.easing),this},animate:function(){return g._emit(this,"meter-animation-start"),this._color()._width()._label()},val:function(t){return void 0!==t&&(t=Number(t),Number.isNaN(t)&&(t=1),t=Math.clamp(t,0,1),this.value=t,this.animate()),this.value},settings:function(t){return t&&"object"==typeof t&&Object.assign(this.settings,t),this.settings},unwrap:function(){return this.$element[0]},place:function(t,e){var i=$(document.createElement("span"));return t instanceof jQuery||(t=$(t)),t[0]||console.warn("meter#place() -> no valid target"),e&&"object"==typeof e&&(e.classes&&(Array.isArray(e.classes)||"string"==typeof e.classes)&&i.addClass(e.classes),e.attr&&"object"==typeof e.attr&&i.attr(e.attr)),t.append(i.append(this.$element)),this._label(),this},clone:function(){return new g(this.settings,this.value)},toJSON:function(){return JSON.reviveWrapper("new setup.Meter("+JSON.stringify(this.settings)+", "+this.value+")")}}),setup.Meter=g,window.Meter=window.Meter||g,Macro.add("newmeter",{tags:["metercolors","metersizing","meteranimation","meterlabel"],handler:function(){if(this.args.length<1)return this.error("The `<<newmeter>>` macro requires at least one argument: the variable name to store the meter in.");var t=this.args[0],e=null,i=null,s=null,a=null;if("$"!==t[0]&&"_"!==t[0])return this.error("Invalid variable name.");this.payload.length&&(e=this.payload.find(function(t){return"metercolors"===t.name}),i=this.payload.find(function(t){return"metersizing"===t.name}),s=this.payload.find(function(t){return"meteranimation"===t.name}),a=this.payload.find(function(t){return"meterlabel"===t.name}));var r={};if(e){if(!e.args.length)return this.error("No arguments passed to the `<<metercolors>>` tag.");switch(e.args.length){case 1:r.empty=e.args[0],r.ful="transparent";break;case 2:r.full=e.args[0],r.empty=e.args[1];break;default:r.full=e.args[0],r.empty=e.args[1],r.back=e.args[3]}}if(i){if(!i.args.length)return this.error("No arguments passed to the `<<metercolors>>` tag.");r.width=i.args[0],i.args[1]&&(r.height=i.args[1])}if(s){if(!s.args.length)return this.error("No arguments passed to the `<<meteranimation>>` tag.");if("boolean"!=typeof s.args[0]||s.args[0]){if("string"!=typeof s.args[0])return this.error("The argument to the `<<meteranimation>>` tag should be `true`, `false`, or a valid CSS time value.");r.animate=Util.fromCssTime(s.args[0])}else r.animate=0;s.args[1]&&["swing","linear"].includes(s.args[1])&&(r.easing=s.args[1])}if(a){var n=a.args[0];if(!n||"string"!=typeof n)return this.error("The first argument to the `<<meterlabel>>` tag should is required.");r.label=n.trim(),a.args[1]&&"string"==typeof a.args[1]&&(r.text=a.args[1]),a.args[2]&&"string"==typeof a.args[2]&&(r.align=a.args[2])}State.setVar(t,new g(r,this.args[1]))}}),Macro.add("showmeter",{handler:function(){if(this.args.length<1)return this.error("This macro requires at least one argument: the variable name.");var t=this.args[0];if("$"!==t[0]&&"_"!==t[0])return this.error("Invalid variable name.");var e=State.getVar(t);if(!g.is(e))return this.error('The variable "'+t+'" does not contain a meter.');e.val(this.args[1]),e.place(this.output,{classes:"macro-"+this.name,attr:{id:"meter-"+Util.slugify(t)}})}}),Macro.add("updatemeter",{handler:function(){if(this.args.length<2)return this.error("This macro requires two arguments: the variable name and a value.");var t=this.args[0];if("$"!==t[0]&&"_"!==t[0])return this.error("Invalid variable name.");var e=State.getVar(t);if(!g.is(e))return this.error('The variable "'+t+'" does not contain a meter.');e.val(this.args[1])}})}();
// end meters.min.js