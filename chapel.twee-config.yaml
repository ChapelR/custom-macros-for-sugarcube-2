sugarcube-2:

  macros:
  
    # start simple inventory
    newinventory: {}
    pickup: {}
    drop: {}
    dropall: {}
    clear: {}
    transfer: {}
    sort: {}
    inventory: {}
    linkedinventory: {}
    # end simple inventory
    
    # start cycles system
    newcycle:
      container: true
      children:
        - phase
    phase:
      parents:  
        - newcycle
    editcycle: {}
    showcycle: {}
    # end cycles system
    
    # start playtime system
    playtime: {}
    # end playtime system
    
    # start dialog api macros
sugarcube-2:
  macros:
    dialog:
      name: dialog
      container: true
      children:
        - onopen
        - onclose
        - dialogclose
      description: |-
        *Syntax:* `<<dialog [title] [classList]>> <</dialog>>`
        
        The `<<dialog>>` macro creates a new dialog box, with an optional title and an optional list of classes for styling. The content between the macro tags is parsed and appended to the dialog box's body. You will generally want to pair this with some type of interaction, like a link or button. You can use the child tags `<<onopen>>` and `<<onclose>>` to run TwineScript code when the dialog is opened and closed (see below).
        
        *Arguments:*
            *title:* (optional) A title to appear at the top of the dialog box. If you want to omit a title but include classes, this argument can be an empty string (`''`).
            *classList:* (optional) A list of CSS classes to add to the dialog, for styling. The classes should be a space-separated list of quoted class names (i.e. `'class-a' 'class-b' 'class-c'`), a quoted list of space-separated class names (i.e. `'class-a class-b class-c'`), or one or more string arrays (i.e. `['class-a', 'class-b', 'class-c']`), or any combination of thereof.
            
        *Usage:*
        ```
        /% creates a link that opens a dialog box called 'Character Sheet' with the classes .char-sheet and .stats %/
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          <</dialog>>
        <</link>>
        
        /% create an about button for your credits %/
        <<button 'About'>>
          <<dialog 'Credits'>>\
            This game was made by John P. Nottingham in Twine!\
          <</dialog>>
        <</button>>
        
        /% a dialog with no title or classes %/
        <<link 'Hello!'>>
          <<dialog>>Greetings!<</dialog>>
        <</link>>
        ```
      parameters:
        - (|+ string |+ ...string)
    onopen:
      name: onopen
      container: true
      parents:
        - dialog
      description: |-
        You can use this child tag to run code when the dialog is opened.

        *Usage:*
        ```
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          <<onopen>>
            <<audio 'click' volume 1 play>>
          <</dialog>>
        <</link>>
        ```
    onclose:
      name: onclose
      container: true
      parents:
        - dialog
      description: |-
        You can use this child tag to run code when the dialog is closed.

        *Usage:*
        ```
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          <<onopen>>
            <<audio 'click' volume 1 play>>
          <<onclose>>
            <<audio 'close' volume 1 play>>
          <</dialog>>
        <</link>>
        ```
    popup:
      name: popup
      description: |-
        *Syntax:* `<<popup passageName [title] [classList]>>`

        The `<<popup>>` macro provides a similar result to what you might get by pairing a `<<dialog>>` macro and an `<<include>>` macro.
        The macro is generally the same as `<<dialog>>`, but the first argument must be the name of a passage, and instead of rendering content from between tags, that passage's content will be rendered into the dialog box.
        This macro does not support the `<<onopen>>` and `<<onclose>>` feature; if you need it, use the `<<dialog>>` macro with `<<include>>`.

        *Arguments:*

            *passageName:* The name of one of your passages. The indicated passage's content will be rendered into the dialog box's body.
            *title:* (optional) A title to appear at the top of the dialog box. If you want to omit a title but include classes, this argument can be an empty string (`''`).
            *classList:* (optional) A list of CSS classes to add to the dialog, for styling. The classes should be a space-separated list of quoted class names (i.e. `'class-a' 'class-b' 'class-c'`), a quoted list of space-separated class names (i.e. `'class-a class-b class-c'`), or one or more string arrays (i.e. `['class-a', 'class-b', 'class-c']`), or any combination of thereof.

        *Usage:*
        ```
        /% 
          creates a link that opens a dialog box called 'Character Sheet' 
          with the classes .char-sheet and .stats
          and renders the content of the passage 'charsheet' into it 
        %/
        <<link 'View Character Sheet'>>
          <<popup 'charsheet' 'Characer Sheet' 'char-sheet stats'>>
        <</link>>

        /% create an about button for your credits that uses the content of the 'credits-passage' passage %/
        <<button 'About'>>
          <<popup 'credits-passage' 'Credits'>>
        <</button>>
        ```
      parameters:
        - passage |+ string |+ ...string
    dialogclose:
      name: dialogclose
      parent:
        dialog
      description: |-
        *Syntax:* `<<dialogclose>>`
        
        Closes the dialog.
        
        *Usage:*
        ```
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          @@float:right;
            <<button "Close">><<dialogclose>><</button>>
          @@
          <</dialog>>
        <</link>>
        ```
    # end dialog api macros
    
    # start popover
    popover:
      container: true
    dismisspopover: {}
    # end popover
    
    # start ui
    ui: {}
    # end ui
    
    # start fading
    fadein:
      container: true
    fadeout:
      container: true
    # end fading
    
    # start css
    css: {}
    # end css
    
    # start notify
    notify:
      container: true
    # end notify
    
    # start meter macros
    newmeter:
      container: true
      children:
        - colors
        - sizing
        - animation
        - label
    colors:
      parents: 
        - newmeter
    sizing:
      parents: 
        - newmeter
    animation:
      parents:  
        - newmeter
    label:
      parents:  
        - newmeter
    showmeter: {}
    updatemeter: {}
    # end meter macros
    
    # start speech box system
    character:
      name: character
      description: |-
        *Syntax:* `<<character name [displayname] imageSrc>>`

        This macro associates a character name, which will automatically become a macro, with an image resourcem provided as a URL (can be relative or absolute). This macro is essentially a macro factoryâ€”it creates other macros based on the arguments you pass. This means that the `name` argument must therefore follow the parameters of normal macros: it must not contain spaces or special characters outside what macro names ordiarily allow. If you need character names without these limitations, you can use the `<<say>>` macro (see below).

        > [!DANGER] This macro will only function if run before the story starts, that is before the first passage is loaded. The `StoryInit` special passage is therefore the best place to define characters.

        If you want your character(s) to have definitions like this one you'll have to add them yourself. They are defined in `chapel.twee-config.yaml`, there's a comment describing the format to use a bit further down than the definition that created this current tooltip.

        *Arguments:*

          * `name`: a character name that can be used as a macro name. This is used to create a macro, and to fill in the name area on the generated speech box. The latter will be automatically capitalized, so if you pass `"lisa"`, the generated macro will be `<<lisa>>` and the name in the speech box will display as `Lisa`. If you pass `"Lisa"`, the name in the speech box will appear `Lisa`, but the macro will be `<<Lisa>>`.
          * `displayname` (optional) : if provided, will be displayed instead of the `name` in the speech box heading. This allows for naming such as `???` or `Maxine Delacroix`, which would otherwise be invalid due to being unable to be used as macro names.
          * `imageSrc`: a URL to an image resource to be used as a character portrait. Portraits should generally be taller than they are wide, as the name suggests, though squares will work fine. Large images will be shrunk to a reasonable size, butvery small images will not be enlarged to fit and may not look right.

        *Usage:*
        ```
        /* creating characters and associating them with images (goes in StoryInit) */
        <<character 'lisa' 'images/portraits/lisa.jpg'>>
        <<character 'bob' 'https://some.website.net/url/to/an/image_file.png'>>
        <<character 'billy' 'data:image/jpg;base64, [base64 encoded data]'>>
        <<character 'maxine' '???' 'images/portraits/unkown-person.jpg'>>

        /* using the generated macros in passages */
        <<lisa>>Hey there!<</lisa>>

        <<maxine>>Do i know you?<</maxine>>

        <<billy>>You just use the name you passed into the {{{<<character>>}}} macro as its own macro to create speech boxes!<</billy>>
        ```
      parameters:
        - string |+ string |+ string # FIXME: I'm not sure how to make the displayName argument optional here and still require the icon argument so both are optional for now.
    say:
      name: say
      container: true
      description: |-
        *Syntax:* `<<say name [imageSrc]>>...<</say>>`

        This macro can be used to create speech boxes that aren't based on predefined characters, allowing you to use names that would be unsuitable as macro names, use bit characters that aren't worth defining, or change a character's name or image, or use characters that don't have associated images.

        *Arguments:*

          * `name`: a character name that can be used in the text box.
          * `imageSrc`: (optional) a URL to an image resource to be used as a character portrait.

        *Usage:*
        ```
        <<say 'Lisa' 'images/portraits/lisa.jpg'>>Hey there!<</say>>

        /* without an image */
        <<say 'Some Guy'>>You n'wah!<</say>>
        ```
      parameters:
        - string |+ string
    ### You'll have to add your own character macros for the characters you create with <<character>> or setup.addCharacter()!

    ### Use this format:
    ### characterName:
    ###   name: characterName
    ###   container: true

    ### (Optional) If you for some reason want a description in the mouse-over tooltip you can add one to your character like it's done above in the say and character definitions.
    
    # end speech box system
    
    # start events
    on:
      container: true
      children:
        - which
    one:
      container: true
      children:
        - which
    event:
      container: true
      children:
        - which
      deprecated: true
      depecatedSuggestions:
        - on
        - off
    which:
      parents:  
        - on
        - off
        - event
    trigger: {}
    off: {}
    # end events
    
    # start continue
    cont:
      container: true
    ignore: {}
    # end continue
    
    # start swap
    swap:
      container: true
      children:
        - onswap
    onswap:
      parents:  
        - swap
    resetswap: {}
    # end swap
    
    # start mouse events
    mouseover:
      container: true
      children:
        - onmouseover
        - onhover
        - onmousein
        - onmouseenter
        - onmouseout
    onmouseover:
      parents:  
        - mouseover
    onhover:
      parents:  
        - mouseover
    onmousein:
      parents:  
        - mouseover
    onmouseenter:
      parents:  
        - mouseover
    onmouseout:
      parents:  
        - mouseover
    # end mouse events
    
    # start message
    message:
      container: true
    # end message
    
    # start typesime
    typesime:
      container: true
    # end typesime
    
    # start pronouns
    pronouns: {}
    verb: {}
    # end pronouns
    
    # start articles
    a: {}
    an: {}
    A: {}
    An: {}
    setarticle: {}
    # end articles
    
    # start preload
    preload: {}
    # end preload
    
    # start done
    done:
      container: true
    # end done
    
    # start file system
    import: {}
    export: {}
    # end file system
    
     # start first
    first:
      container: true
      children:
        - then
        - finally
    then:
      parents:  
        - first
    finally:
      parents:  
        - first
    # end first
    
    # start disable
    disable:
      container: true
    # end disable