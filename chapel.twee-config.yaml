sugarcube-2:

  macros:
  
    # start simple inventory
    newinventory: {}
    pickup: {}
    drop: {}
    dropall: {}
    clear: {}
    transfer: {}
    sort: {}
    inventory: {}
    linkedinventory: {}
    # end simple inventory
    
    # start cycles system
    newcycle:
      container: true
      children:
        - phase
    phase:
      parents:  
        - newcycle
    editcycle: {}
    showcycle: {}
    # end cycles system
    
    # start playtime system
    playtime: {}
    # end playtime system
    
    # start dialog api macros
sugarcube-2:
  macros:
    dialog:
      name: dialog
      container: true
      children:
        - onopen
        - onclose
        - dialogclose
      description: |-
        *Syntax:* `<<dialog [title] [classList]>> <</dialog>>`
        
        The `<<dialog>>` macro creates a new dialog box, with an optional title and an optional list of classes for styling. The content between the macro tags is parsed and appended to the dialog box's body. You will generally want to pair this with some type of interaction, like a link or button. You can use the child tags `<<onopen>>` and `<<onclose>>` to run TwineScript code when the dialog is opened and closed (see below).
        
        *Arguments:*
            *title:* (optional) A title to appear at the top of the dialog box. If you want to omit a title but include classes, this argument can be an empty string (`''`).
            *classList:* (optional) A list of CSS classes to add to the dialog, for styling. The classes should be a space-separated list of quoted class names (i.e. `'class-a' 'class-b' 'class-c'`), a quoted list of space-separated class names (i.e. `'class-a class-b class-c'`), or one or more string arrays (i.e. `['class-a', 'class-b', 'class-c']`), or any combination of thereof.
            
        *Usage:*
        ```
        /% creates a link that opens a dialog box called 'Character Sheet' with the classes .char-sheet and .stats %/
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          <</dialog>>
        <</link>>
        
        /% create an about button for your credits %/
        <<button 'About'>>
          <<dialog 'Credits'>>\
            This game was made by John P. Nottingham in Twine!\
          <</dialog>>
        <</button>>
        
        /% a dialog with no title or classes %/
        <<link 'Hello!'>>
          <<dialog>>Greetings!<</dialog>>
        <</link>>
        ```
      parameters:
        - (|+ string |+ ...string)
    onopen:
      name: onopen
      container: true
      parents:
        - dialog
      description: |-
        You can use this child tag to run code when the dialog is opened.

        *Usage:*
        ```
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          <<onopen>>
            <<audio 'click' volume 1 play>>
          <</dialog>>
        <</link>>
        ```
    onclose:
      name: onclose
      container: true
      parents:
        - dialog
      description: |-
        You can use this child tag to run code when the dialog is closed.

        *Usage:*
        ```
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          <<onopen>>
            <<audio 'click' volume 1 play>>
          <<onclose>>
            <<audio 'close' volume 1 play>>
          <</dialog>>
        <</link>>
        ```
    popup:
      name: popup
      description: |-
        *Syntax:* `<<popup passageName [title] [classList]>>`

        The `<<popup>>` macro provides a similar result to what you might get by pairing a `<<dialog>>` macro and an `<<include>>` macro.
        The macro is generally the same as `<<dialog>>`, but the first argument must be the name of a passage, and instead of rendering content from between tags, that passage's content will be rendered into the dialog box.
        This macro does not support the `<<onopen>>` and `<<onclose>>` feature; if you need it, use the `<<dialog>>` macro with `<<include>>`.

        *Arguments:*

            *passageName:* The name of one of your passages. The indicated passage's content will be rendered into the dialog box's body.
            *title:* (optional) A title to appear at the top of the dialog box. If you want to omit a title but include classes, this argument can be an empty string (`''`).
            *classList:* (optional) A list of CSS classes to add to the dialog, for styling. The classes should be a space-separated list of quoted class names (i.e. `'class-a' 'class-b' 'class-c'`), a quoted list of space-separated class names (i.e. `'class-a class-b class-c'`), or one or more string arrays (i.e. `['class-a', 'class-b', 'class-c']`), or any combination of thereof.

        *Usage:*
        ```
        /% 
          creates a link that opens a dialog box called 'Character Sheet' 
          with the classes .char-sheet and .stats
          and renders the content of the passage 'charsheet' into it 
        %/
        <<link 'View Character Sheet'>>
          <<popup 'charsheet' 'Characer Sheet' 'char-sheet stats'>>
        <</link>>

        /% create an about button for your credits that uses the content of the 'credits-passage' passage %/
        <<button 'About'>>
          <<popup 'credits-passage' 'Credits'>>
        <</button>>
        ```
      parameters:
        - passage |+ string |+ ...string
    dialogclose:
      name: dialogclose
      parent:
        dialog
      description: |-
        *Syntax:* `<<dialogclose>>`
        
        Closes the dialog.
        
        *Usage:*
        ```
        <<link 'View Character Sheet'>>
          <<dialog 'Character Sheet' 'char-sheet stats'>>\
            |Strength|$str|
            |Dexterity|$dex|
            |Wisdom|$wis|\
          @@float:right;
            <<button "Close">><<dialogclose>><</button>>
          @@
          <</dialog>>
        <</link>>
        ```
    # end dialog api macros
    
    # start popover
    popover:
      container: true
    dismisspopover: {}
    # end popover
    
    # start ui
    ui: {}
    # end ui
    
    # start fading
    fadein:
      container: true
    fadeout:
      container: true
    # end fading
    
    # start css
    css: {}
    # end css
    
    # start notify
    notify:
      container: true
    # end notify
    
    # start meter macros
    newmeter:
      container: true
      children:
        - colors
        - sizing
        - animation
        - label
    colors:
      parents: 
        - newmeter
    sizing:
      parents: 
        - newmeter
    animation:
      parents:  
        - newmeter
    label:
      parents:  
        - newmeter
    showmeter: {}
    updatemeter: {}
    # end meter macros
    
    # start speech box system
    character: {}
    say:
      container: true
    ### you'll have to add your own character macros! use this format:
    
    ### characterName:
    ###   container: true
    
    # end speech box system
    
    # start events
    on:
      container: true
      children:
        - which
    one:
      container: true
      children:
        - which
    event:
      container: true
      children:
        - which
      deprecated: true
      depecatedSuggestions:
        - on
        - off
    which:
      parents:  
        - on
        - off
        - event
    trigger: {}
    off: {}
    # end events
    
    # start continue
    cont:
      container: true
    ignore: {}
    # end continue
    
    # start swap
    swap:
      container: true
      children:
        - onswap
    onswap:
      parents:  
        - swap
    resetswap: {}
    # end swap
    
    # start mouse events
    mouseover:
      container: true
      children:
        - onmouseover
        - onhover
        - onmousein
        - onmouseenter
        - onmouseout
    onmouseover:
      parents:  
        - mouseover
    onhover:
      parents:  
        - mouseover
    onmousein:
      parents:  
        - mouseover
    onmouseenter:
      parents:  
        - mouseover
    onmouseout:
      parents:  
        - mouseover
    # end mouse events
    
    # start message
    message:
      container: true
    # end message
    
    # start typesime
    typesime:
      container: true
    # end typesime
    
    # start pronouns
    pronouns: {}
    verb: {}
    # end pronouns
    
    # start articles
    a: {}
    an: {}
    A: {}
    An: {}
    setarticle: {}
    # end articles
    
    # start preload
    preload: {}
    # end preload
    
    # start done
    done:
      container: true
    # end done
    
    # start file system
    import: {}
    export: {}
    # end file system
    
     # start first
    first:
      container: true
      children:
        - then
        - finally
    then:
      parents:  
        - first
    finally:
      parents:  
        - first
    # end first
    
    # start disable
    disable:
      container: true
    # end disable