:: Start
This is a demo story file intended to show off some usage examples of my custom macros and systems for SugarCube.  You can look into the included systems by using the story menu on the left.

[[Source code and downloads.|https://github.com/ChapelR/custom-macros-for-sugarcube-2]]

[[Download this example file.|https://github.com/ChapelR/custom-macros-for-sugarcube-2/tree/master/demo/source]] (Available as a Twine 1 tws file, a Twine 2 html archive, and a Twee notation file.)

[[Report bugs with this demo.|https://github.com/ChapelR/custom-macros-for-sugarcube-2/issues/new]]

[[Take a look at my blog.|http://devlog.holylandgame.com/]]


:: dialogJS [script]
// dialog API macro set, by chapel; for sugarcube 2; v1.2.0
;Macro.add("dialog",{tags:null,handler:function(){var s=this.payload[0].contents?this.payload[0].contents:"",t=this.args.length>0?this.args[0]:"",a=this.args.length>1?this.args.slice(1).flatten():[];a.push("macro-"+this.name),Dialog.setup(t,a.join(" ")),Dialog.wiki(s),Dialog.open()}}),Macro.add("popup",{handler:function(){if(this.args.length<1)return this.error("need at least one argument; the passage to display");if(!Story.has(this.args[0]))return this.error("the passage "+this.args[0]+"does not exist");var s=this.args[0],t=this.args.length>1?this.args[1]:"",a=this.args.length>2?this.args.slice(2).flatten():[];a.push("macro-"+this.name),Dialog.setup(t,a.join(" ")),Dialog.wiki(Story.get(s).processText()),Dialog.open()}});
// end dialog API macro set


:: dropdownJS [script]
// dropdown macro, by chapel (with help from Thomas Michael Edwards); for SugarCube 2; v1.2.0
Macro.add("dropdown",{handler:function(){if(this.args.length<2){var e=[];return this.args.length<1&&e.push("variable name"),this.args.length<2&&e.push("list values"),this.error("no "+e.join(" or ")+" specified")}if("string"!=typeof this.args[0])return this.error("variable name argument is not a string");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');Config.debug&&this.debugView.modes({block:!0});for(var t=Util.slugify(i),r=this.args.slice(1).flatten(),a=Wikifier.getValue(i),s=0,n=document.createElement("select"),o=0;o<r.length;++o){var l=r[o];String(l)===a&&(s=o),jQuery(document.createElement("option")).text(l).appendTo(n)}jQuery(n).val(r[s]).attr({id:this.name+"-"+t,name:this.name+"-"+t,tabindex:0}).addClass("macro-"+this.name).on("change",function(){Wikifier.setValue(i,this.value)}).appendTo(this.output),Wikifier.setValue(i,r[s])}});
// end dropdown macro


:: fadingJS [script]
// fading macro set, by chapel; for SugarCube 2; v1.1.0
Macro.add("fadein",{tags:null,handler:function(){var t,a,s=$(document.createElement("span")),e=this.payload[0].contents;return 0===this.args.length?this.error("no arguments given"):(t=Util.fromCssTime(this.args[0]),a=this.args.length>1?Util.fromCssTime(this.args[1]):0,void s.wiki(e).addClass("macro-"+this.name).appendTo(this.output).hide().delay(a).fadeIn(t))}}),Macro.add("fadeout",{tags:null,handler:function(){var t,a,s=$(document.createElement("span")),e=this.payload[0].contents;return 0===this.args.length?this.error("no arguments given"):(t=Util.fromCssTime(this.args[0]),a=this.args.length>1?Util.fromCssTime(this.args[1]):0,void s.wiki(e).addClass("macro-"+this.name).appendTo(this.output).delay(a).fadeOut(t))}});
// end fading macro set


:: firstJS [script]
// first macro, by chapel; for sugarcube 2; v1.1.0
;Macro.add("first",{tags:["then","finally"],handler:function(){var a,t=$(document.createElement("span")),n=this.payload[this.payload.length-1],e=visited()-1;a=e<this.payload.length?this.payload[e].contents:"finally"===n.name?n.contents:"",t.wiki(a).addClass("macro-"+this.name).appendTo(this.output)}});
// end first macro


:: insertJS [script]
// Coming soon!


:: consumablesJS [script]
// Coming soon!


:: PassageFooter
<<if tags().includes('inv')>>\
	@@#inventory;
		<<inventory '$playerInv'>>\
	@@
<</if>>


:: StoryTitle
Custom Macros Demo


:: fullscreenJS [script]
// fullscreen macro set, by chapel; for sugarcube 2; v1.0.0
setup.fullscreen=function(e){e.requestFullScreen?e.requestFullScreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullScreen&&e.webkitRequestFullScreen()},Macro.add("fullscreen",{handler:function(){var e=$("body").css("background-color");$("html").css("background-color",e),setup.fullscreen(document.documentElement)}}),Macro.add("fullscreenlink",{handler:function(){var e,n,r=$(document.createElement("span")),c=$(document.createElement("a")),t="macro-"+this.name;return 1!==this.args.length?this.error("incorrect number of arguments"):(n=this.args[0],c.wiki(n).attr("id","fullscreen-macro-link").ariaClick(function(){e=$("body").css("background-color"),$("html").css("background-color",e),setup.fullscreen(document.documentElement)}),void r.append(c).addClass(t).appendTo(this.output))}});
// end fullscreen macro set


:: messageJS [script]
// message macro, by chapel (with help from T.M. Edwards); for sugarcube 2; v1.0.1
;setup.messageMacro={},    /*OPTION*/setup.messageMacro["default"]="Help",
Macro.add("message",{tags:null,handler:function(){var e=this.payload[0].contents,a=$(document.createElement("span")),s=$(document.createElement(this.args.includes("btn")?"button":"a")),t=$(document.createElement("span"));s.wiki(this.args.length>0&&"btn"!==this.args[0]?this.args[0]:setup.messageMacro["default"]).ariaClick(function(){a.hasClass("open")?t.css("display","none").empty():t.css("display","block").wiki(e),a.toggleClass("open")}),a.attr("id","macro-"+this.name+"-"+this.args.join("").replace(/[^A-Za-z0-9]/g,"")).addClass("message-text").append(s).append(t).appendTo(this.output)}});
// end message macro


:: operationsJS [script]
// operations, by chapel; for sugarcube 2; v1.0.0
;setup.operations={tryGlobal:!0,nicknames:!0,fmRange:[0,100]},setup.dice={processDice:function(e,r){var t,i=[],o=0;if("string"==typeof e)i=e.split("d");else if("number"==typeof e&&r)i=[e,r];else{if(!(Array.isArray(e)&&e.length>=2))throw new TypeError("setup.dice.processDice(): could not process arguments...");e.length=2,i=e}for(t=0;t<i[0];t++){var n=0;n=Math.floor(Math.random()*i[1])+1,o+=n}return o},processString:function(e){var r=[];return e=e.trim().replace(/\s/g,""),r=e.match(/(\d*d\d*)(.*)/),[r[1],Number(r[2])]},roll:function(e,r){if("string"==typeof e){var t=setup.dice.processString(e);return setup.dice.processDice(t[0])+t[1]}return setup.dice.processDice(e,r)}},setup.operations.tryGlobal&&(window.dice=window.dice||setup.dice.roll),Number.prototype.dice||Object.defineProperty(Number.prototype,"dice",{configurable:!0,writable:!0,value:function(e){if(0===this)return 0;if(0>this)throw new TypeError("Number.prototype.dice: cannot roll a negative number of dice!");if(null==e||"number"!=typeof e||0>=e||arguments.length<1)throw new TypeError("Number.prototype.dice: error in argument");if(!Number.isInteger(this)||!Number.isInteger(e))throw new TypeError("Number.prototype.dice: cannot roll partial dice!");return setup.dice.processDice(this,e)}}),Number.prototype.fairmath||Object.defineProperty(Number.prototype,"fairmath",{configurable:!0,writable:!0,value:function(e){var r=setup.operations.fmRange;if(this<r[0]||this>r[1])throw new TypeError("Number.prototype.fairmath called on a number that is out of the defined range (the number was "+this+").");if(null==e||"number"!=typeof e||e>100||-100>e||arguments.length<1)throw new TypeError("Number.prototype.fairmath given incorrect argument or an argument that is out of the valid 0-100 range.");if(0===e)return Math.clamp(Math.trunc(this),r[0],r[1]);if(0>e)return e=-1*e,Math.clamp(Math.trunc(this-(this-r[0])*(e/r[1])),r[0],r[1]);if(e>0)return Math.clamp(Math.trunc(this+(r[1]-this)*(e/r[1])),r[0],r[1]);throw new Error("Number.prototype.fairmath encountered an unspecified error.")}}),Math.fairmath||Object.defineProperty(Math,"fairmath",{configurable:!0,writable:!0,value:function(e,r){return e.fairmath(r)}}),setup.operations.nicknames&&(Math.fm||Object.defineProperty(Math,"fm",{configurable:!0,writable:!0,value:function(e,r){return e.fairmath(r)}}),Number.prototype.fm||Object.defineProperty(Number.prototype,"fm",{configurable:!0,writable:!0,value:function(e){return this.fairmath(e)}}),Number.prototype.d||Object.defineProperty(Number.prototype,"d",{configurable:!0,writable:!0,value:function(e){return this.dice(e)}}));
// end operations.js


:: playtimeJS [script]
// play time system, by chapel; for SugarCube 2; v2.0.1
setup.playTime={},setup.playTime.options={tryGlobal:!0,storyVar:"playtime",pauseTag:"pausetimer"},State.variables[setup.playTime.options.storyVar]=Date.now(),predisplay["start-playtime"]=function(e){delete predisplay[e],State.variables[setup.playTime.options.storyVar]||(State.variables[setup.playTime.options.storyVar]=Date.now())},prehistory["pause-playtime"]=function(e){tags().includes(setup.playTime.options.pauseTag)&&(State.variables[setup.playTime.options.storyVar]+=time())},setup.playTime.getMS=function(){return Date.now()-State.variables[setup.playTime.options.storyVar]},setup.playTime.getTimeArray=function(e){if(e&&!(0>e)&&"number"==typeof e){var t=[];return t.push(Math.floor(e/1e3)%60),t.push(Math.floor(e/6e4)%60),t.push(Math.floor(e/36e5)%24),t}},setup.playTime.get=function(e){var t=setup.playTime.getMS(),a=setup.playTime.getTimeArray(t);return["h","hr","hrs","hour","hours"].includes(e)?a[2]:["min","mins","minutes","minute","m"].includes(e)?a[1]:["s","second","sec","seconds","secs"].includes(e)?a[0]:t},setup.playTime.formatTime=function(e,t){if(e&&Array.isArray(e)&&!(e.length<3)){var a=e[2]<10?"0"+e[2]:""+e[2],i=e[1]<10?"0"+e[1]:""+e[1],s=e[0]<10?"0"+e[0]:""+e[0];return t?"<b>"+a+":"+i+"</b>:"+s:a+":"+i+":"+s}},setup.playTime.output=function(e){var t=setup.playTime.getMS();return setup.playTime.formatTime(setup.playTime.getTimeArray(t),e)},setup.playTime.options.tryGlobal&&(window.playTime=window.getPlayTime||function(e){return"string"==typeof e?setup.playTime.get(e):setup.playTime.output(e)}),Macro.add("playtime",{handler:function(){var e=function(e){var t=[];return e.forEach(function(e){e+="",t.push(e.trim().toLowerCase())}),t}(this.args),t=$(document.createElement("span")),a=e.includesAny(["format","f","fmt","b","bold","true"])?!0:!1,i=setup.playTime.output(a);t.wiki(i).addClass("macro-"+this.name).appendTo(this.output)}});
// end play time system


:: eventJS [script]
// event macro set, by chapel; for sugarcube 2; v1.1.1
;Macro.add("trigger",{handler:function(){var t,r;return this.args.length>2||0===this.args.length?this.error("incorrect number of arguments"):"string"!=typeof this.args[0]?this.error("first argument should be a string and a valid event type"):(t=this.args[0],r=1===this.args.length||this.args[1]&&"string"==typeof this.args[1]&&"document"===this.args[1].toLowerCase().trim()?$(document):$(this.args[1]),void r.trigger(t))}}),Macro.add("event",{tags:["which"],handler:function(){var t,r,s=this.payload,e="",i="";return this.args.length>2||0===this.args.length?this.error("incorrect number of arguments"):"string"!=typeof this.args[0]?this.error("first argument should be a string and a valid event type"):(2===this.args.length&&"string"==typeof this.args[1]&&(e=this.args[1]),t=this.args[0],void $(document).on(t,e,function(t){if(i=s[0].contents,s.length>1)for(r=1;r<s.length;r++)s[r].args.includes(t.which)&&(i+=s[r].contents);new Wikifier(null,i)}))}});
// end event macro set


:: cyclesJS [script]
// Coming soon!


:: StoryAuthor
Chapel


:: notifyJS [script]
// notify.js, by chapel; for sugarcube 2; v1.0.0
;$(document.body).append("<div id='notify'></div>"),$(document).on(":notify",function(s){s.message&&"string"==typeof s.message&&(s.message.trim(),s["class"]?"string"==typeof s["class"]?s["class"]="open "+s["class"]:Array.isArray(s["class"])?s["class"]="open macro-notify "+s["class"].join(" "):s["class"]="open macro-notify":s["class"]="open macro-notify",s.delay?("number"!=typeof s.delay&&(s.delay=Number(s.delay)),Number.isNaN(s.delay)&&(s.delay=2e3)):s.delay=2e3,$("#notify").empty().wiki(s.message).addClass(s["class"]),setTimeout(function(){$("#notify").removeClass()},s.delay))}),Macro.add("notify",{tags:null,handler:function(){var s=this.payload[0].contents,e=!1,a=!1;this.args.length>0&&("number"==typeof this.args[0]?(e=this.args[0],a=this.args.length>1?this.args.slice(1).flatten():!1):a=this.args.flatten().join(" ")),$(document).trigger({type:":notify",message:s,delay:e,"class":a})}});
// end notify.js


:: notifyCSS [stylesheet]
/* notify.min.css, by chapel; for use with notify.js; v1.0.0 */
#notify{position:fixed;display:block;width:16em;right:-20em;top:2em;padding:.5em;background-color:#fff;color:#000;-webkit-transition-duration:.3s;-moz-transition-duration:.3s;-o-transition-duration:.3s;transition-duration:.3s}#notify.open{right:0}


:: config [script]
$(document).on(':inventory-update', function (e) {
	console.log(e.moved);
});


:: base [stylesheet]
#menu-core { display : none; }
#story-author { display : none; }
#story-title { display : none; }

.message-text a { color : #9400d3; }
.message-text a:hover { color : #f0f; }
.message-text.open a { color : #f0f; }
.message-text.open a:hover { color : #9400d3; }

#ex .message-text a { color : #68d; }
#ex .message-text a:hover { color : #8af; }
#ex .message-text.open a { color : #68d; }
#ex .message-text.open a:hover { color : #8af; }

#notify.big { height : 10em; }

#inventory { border : 2px solid #eee; padding : 1em;}


:: typeSimJS [script]
// typesim macro, by chapel; for sugarcube 2; v1.0.0
;Macro.add("typesim",{tags:null,handler:function(){var t=$(document.createElement("textarea")),e=$(document.createElement("div"));if(1!==this.args.length)return this.error("incorrect number of arguments");if("string"!=typeof this.args[0])return this.error("argument should be a string");var r=this.args[0],a="",n=r.length,i=0,s="typesim-output-"+r.replace(/[^A-Za-z0-9]/g,""),o="macro-"+this.name,d=this.payload[0].contents;t.wiki(a).attr({id:s,readonly:!0}).addClass(o).appendTo(this.output),$(document).on("keydown","#"+s,function(t){n>i&&(a+=r.charAt(i),$("#"+s).empty().wiki(a)),i===n&&e.wiki(d).addClass(o).insertAfter("#"+s),i++})}});
// end typesim macro


:: simpleInvJS [script]
// simple-inventory.js, by chapel; for sugarcube 2; v2.1.0
setup.simpleInv={},setup.simpleInv.options={tryGlobal:!0,emptyMsg:"You're not carrying anything..."},setup.simpleInv.attachEvent=function(i,t,r,n){$(document).trigger({type:"initialized"===n?":inventory-init":":inventory-update",instance:i,recieving:t,moved:r,context:n})},setup.simpleInv.inventory=function(i){i&&Array.isArray(i)&&1===arguments.length?this.inv=i:i?(i=[].slice.call(arguments),i=i.flatten()):(i=null,this.inv=[]),setup.simpleInv.attachEvent(this,null,i,"initialized")},setup.simpleInv.inventory.prototype={transfer:function(i){if(arguments.length<2)return this;if(!(i instanceof setup.simpleInv.inventory))return this;var t=[].slice.call(arguments);t=t.slice(1).flatten();for(var r=[],n=0,e=t.length;e>n;n++)this.inv.includes(t[n])&&(this.inv["delete"](t[n]),r.push(t[n]));return r.length?(i.inv=i.inv.concat(r),setup.simpleInv.attachEvent(this,i,r,"transfer"),this):this},has:function(){var i=[].slice.call(arguments).flatten();return i&&i.length?this.inv.includesAny(i):!1},hasAll:function(){var i=[].slice.call(arguments).flatten();return i&&i.length?this.inv.includesAll(i):!1},pickUp:function(i){var t=[].slice.call(arguments).flatten(),r=this;return t&&t.length&&(i&&(t=function(i){var t=[];return i.forEach(function(i){r.inv.includes(i)||t.push(i)}),t}(t)),this.inv=this.inv.concat(t),setup.simpleInv.attachEvent(this,null,t,"pickup")),this},drop:function(){var i=[].slice.call(arguments).flatten(),t=this;if(i&&i.length){var r=[];i.forEach(function(i){t.has(i)&&(r.push(i),t.inv["delete"](i))}),setup.simpleInv.attachEvent(this,null,r,"drop")}return this},sort:function(){return this.inv=this.inv.sort(),setup.simpleInv.attachEvent(this,null,null,"sort"),this},show:function(i){return i&&"string"==typeof i||(i="\n"),this.inv.length?this.inv.join(i):setup.simpleInv.options.emptyMsg},empty:function(){var i=clone(this.inv);return this.inv=[],setup.simpleInv.attachEvent(this,null,i,"drop"),this},toArray:function(){return this.inv},linkedList:function(i,t){i&&i instanceof setup.simpleInv.inventory||(i=!1);var r=this.toArray(),n=this,e=$(document.createElement("span"));return r&&r.length?(r.forEach(function(r,s,a){var o=$(document.createElement("span")),l=$(document.createElement("a")),u=t?t:"Discard",h="simple-inv-"+s+r.replace(/[^A-Za-z0-9]/g,"");l.wiki(u).addClass("simple-inv drop-link"),l.ariaClick(function(){i?n.transfer(i,r):n.drop(r),$("#"+h).empty()}),o.attr("id",h).addClass("simple-inv link-listing").wiki(r+" ").append(l),s<a.length-1&&o.wiki("<br />"),e.append(o)}),e):(e.wiki(setup.simpleInv.options.emprtyMsg),e)},constructor:setup.simpleInv.inventory,toJSON:function(){return JSON.reviveWrapper("new setup.simpleInv.inventory("+JSON.stringify(this.inv)+")")}},setup.simpleInv.options.tryGlobal&&(window.Inventory=window.Inventory||setup.simpleInv.inventory),Macro.add("newinventory",{handler:function(){if(1!==this.args.length)return this.error("incorrect number of arguments");var i=this.args[0].trim();return"$"!==i[0]&&"_"!==i[0]?this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)'):void Wikifier.setValue(i,new setup.simpleInv.inventory(this.args.slice(1).flatten()))}}),Macro.add("pickup",{handler:function(){if(this.args.length<2)return this.error("incorrect number of arguments");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var t=Wikifier.getValue(i);return t instanceof setup.simpleInv.inventory?void t.pickUp(this.args.slice(1).flatten()):this.error("variable "+i+" is not an inventory!")}}),Macro.add("drop",{handler:function(){if(this.args.length<2)return this.error("incorrect number of arguments");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var t=Wikifier.getValue(i);return t instanceof setup.simpleInv.inventory?void t.drop(this.args.slice(1).flatten()):this.error("variable "+i+" is not an inventory!")}}),Macro.add("transfer",{handler:function(){if(this.args.length<3)return this.error("incorrect number of arguments");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var t=Wikifier.getValue(i);if(!(t instanceof setup.simpleInv.inventory))return this.error("variable "+i+" is not an inventory!");var r=this.args[1].trim();if("$"!==r[0]&&"_"!==r[0])return this.error('variable name "'+this.args[1]+'" is missing its sigil ($ or _)');var n=Wikifier.getValue(r);return n instanceof setup.simpleInv.inventory?void t.transfer(n,this.args.slice(2).flatten()):this.error("variable "+r+" is not an inventory!")}}),Macro.add("dropall",{handler:function(){if(1!==this.args.length)return this.error("incorrect number of arguments");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var t=Wikifier.getValue(i);return t instanceof setup.simpleInv.inventory?void t.empty():this.error("variable "+i+" is not an inventory!")}}),Macro.add("clear","dropall",!1),Macro.add("sort",{handler:function(){if(1!==this.args.length)return this.error("incorrect number of arguments");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var t=Wikifier.getValue(i);return t instanceof setup.simpleInv.inventory?void t.sort():this.error("variable "+i+" is not an inventory!")}}),Macro.add("inventory",{handler:function(){if(this.args.length<1||this.args.length>2)return this.error("incorrect number of arguments");var i=this.args[0].trim();if("$"!==i[0]&&"_"!==i[0])return this.error('variable name "'+this.args[0]+'" is missing its sigil ($ or _)');var t=Wikifier.getValue(i);if(!(t instanceof setup.simpleInv.inventory))return this.error("variable "+i+" is not an inventory!");var r=$(document.createElement("span")),n=this.args[1]?this.args[1]:!1;r.wiki(t.show(n)).addClass("macro-"+this.name).appendTo(this.output)}}),Macro.add("linkedinventory",{handler:function(){if(this.args.length<2||this.args.length>3)return this.error("incorrect number of arguments");var i=!1,t=this.args[1].trim(),r="string"==typeof this.args[0]?this.args[0]:!1;if(!r)return this.error("first argument should be the link text");if("$"!==t[0]&&"_"!==t[0])return this.error('variable name "'+this.args[1]+'" is missing its sigil ($ or _)');var n=Util.slugify(t),n=this.name+"-"+n,e=Wikifier.getValue(t);if(!(e instanceof setup.simpleInv.inventory))return this.error("variable "+t+" is not an inventory!");if(this.args.length>2){var s=this.args[2].trim();if("$"!==s[0]&&"_"!==s[0])return this.error('variable name "'+this.args[2]+'" is missing its sigil ($ or _)');if(i=Wikifier.getValue(s),!(i instanceof setup.simpleInv.inventory))return this.error("variable "+s+" is not an inventory!")}var a=e.linkedList(i,r);a.attr("id",n).addClass("macro-"+this.name).appendTo(this.output)}});
// end simple-inventory.js


:: StoryMenu
[[Dialog API Macros]]
[[The Drop Down Menu]]
[[The Fading Macros|fading]]
[[The First Macro]]
[[The Fullscreen Macro]]
[[The Message Macro]]
[[The Operations System]]
[[The Play Time System]]
[[The Notify Macro]]
[[The TypeSim Macro]]
[[The Insert Macro]]
[[The Event Macros]]
[[Simple Inventory]]
[[Consumables]]
[[Cycles]]


:: Dialog API Macros
There are two dialog API macros:

{{{<<dialog>>}}} and {{{<<popup>>}}}.

<<button 'View Dialog'>>
	<<dialog 'Hello there.'>>\
		How are you?\
	<</dialog>>
<</button>>

<<message 'View this code.'>>\
	{{{<<button 'View Dialog'>>}}}
	<<tab>>{{{<<dialog 'Hello there.'>>\}}}
	<<tab>><<tab>>{{{How are you?\}}}
	<<tab>>{{{<</dialog>>}}}
	{{{<</button>>}}}\
<</message>>

<<button 'View Popup'>>
	<<popup 'popupTest' 'Welcome.'>>
<</button>>

<<message 'View this code.'>>\
	{{{<<button 'View Popup'>>}}}
	<<tab>>{{{<<popup 'popupTest' 'Welcome.'>>}}}
	{{{<</button>>}}}
	
	{{{::popupTest}}}
	{{{Nice to meet you.}}}
<</message>>


:: The Drop Down Menu
You can use the dropdown menu by supplying the {{{<<dropdown>>}}} macro with a variable name (which must be passed in quotes, as with all input macros) and a series of arguments (or an array, or a combination of arrays and individual arguments).  The user can select one of the options and the passed variable will be set.

<<set $anArray to ['red', 'blue', 'green']>>\
<<set $choice to ''>>\
<<dropdown '$choice' 'white' 'black' 'gray' $anArray>>

<<button [[Confirm|dropDown2]]>><</button>>

<<message 'View this code.'>>\
	{{{<<set $anArray to ['red', 'blue', 'green']>>\}}}
	{{{<<set $choice to ''>>\}}}
	{{{<<dropdown '$choice' 'white' 'black' 'gray' $anArray>>}}}

	{{{<<button [[Confirm|dropDown2]]>><</button>>}}}\
<</message>>


:: fading
<<fadein 1s 500ms>>\
	This example fades in thanks to the fading macros macro!\
<</fadein>>

<<fadeout 5s 5s>>\
	Meanwhile, this content will slowly fade out after a few seconds.\
<</fadeout>>

<<fadein 1s 3s>>\
	<<fadeout 1s 6s>>\
		And this content uses both macros.  Spooky!\
	<</fadeout>>\
<</fadein>>

<<message 'View this code'>>\
	{{{<<fadein 1s 500ms>>\}}}
	<<tab>>{{{These example fades in thanks to the <<fadein>> macro!\}}}
	{{{<</fadein>>}}}

	{{{<<fadeout 5s 5s>>\}}}
	<<tab>>{{{Meanwhile, this content will slowly fade out after a few seconds.\}}}
	{{{<</fadeout>>}}}

	{{{<<fadein 1s 3s>>\}}}
	<<tab>>{{{<<fadeout 1s 6s>>\}}}
	<<tab>><<tab>>{{{And this content uses both macros.  Spooky!\}}}
	<<tab>>{{{<</fadeout>>\}}}
	{{{<</fadein>>}}}
<</message>>


:: The First Macro
<<first>>You can revisit this passage a few times to see how things change!<<finally>>Good job!<</first>>

<<first>><<then>>The first macro allows you to dynamically alter content based on the number of times a player has seen a given passage.<<then>>You can make any number of alterations to the text.<</first>>

[[Reload this passage.|passage()]]

<<message 'View this code.'>>\
{{{<<first>>You can revisit this passage a few times to see how things change!<<finally>>Good job!<</first>>}}}

{{{<<first>><<next>>The first macro allows you to dynamically alter content based on the number of times a player has seen a given passage.<<next>>You can make any number of alterations to the text.<</first>>}}}

{{{[[Reload this passage.|passage()]]}}}\
<</message>>


:: invJS-API
There's also a lot you can do with the simple inventory in pure JavaScript.  Here's a list of methods:

!!!INVENTORY METHODS
* {{{<inv>.transfer(<inv>, [items])}}} // chainable//
* {{{<inv>.has([items])}}} // not chainable; returns boolean//
* {{{<inv>.hasAll([items])}}} // not chainable; returns boolean//
* {{{<inv>.pickUp([items])}}} // chainable//
* {{{<inv>.drop([items])}}} // chainable//
* {{{<inv>.sort()}}} // chainable//
* {{{<inv>.show([seperator])}}} // not chainable; returns string//
* {{{<inv>.empty()}}} // chainable//
* {{{<inv>.toArray()}}} // not chainable; returns array//

Where:
* {{{<inv>}}} represents an inventory instance, either from the {{{<<<newinventory>>}}} macro or from Javascript (i.e. {{{State.variables.inventory = new Inventory()}}}).
* {{{[items]}}} represents a list of items: either an array, a list of comma-separated strings, or some combination of the two.
* {{{[separator]}}} represents a string.

The methods are chainable as well, unless they return a specific value.

<<set $inventory to new Inventory()>>\
<<= $inventory.pickUp('sticks', 'cards', ['something shiny', 'a blade', 'a wet noodle']).drop('cards').sort().show(', ')>>

<<message 'View this code.'>>\
	{{{<<set $inventory to new Inventory()>>\}}}
	{{{<<= $inventory.pickUp('sticks', 'cards', ['something shiny', 'a blade', 'a wet noodle']).drop('cards').sort().show(', ')>>}}}\
<</message>>

In addition to this, everytime an inventory is updated, a syntheitc event, {{{:inventory-update}}} is fired.  The event contains a variety of information, including which inventories were involved and which items were moved, allowing users to create even more dynamic and responsive systems.  We've been using it this whole time to output all 'moved' items to the console; every time an item entered or left an inventory, it was logged.  See for yourself!

For the complete documentation of the simple inventory, both its macros and its JavaScript systems, refer to the documentation.

[[Go back to the beginning.|Simple Inventory]]


:: widgets [widget nobr]
<<widget 'tab'>>
	<<= "&nbsp;&nbsp;&nbsp;&nbsp;">>
<</widget>>


:: popupTest
Nice to meet you.


:: dropDown2
<<= '<div style="height:5em;background:' + $choice + ';"></div>'>>

<<message 'View this code.'>>\
	{{{<<= '<div style="height:5em;background:' + $choice + ';"></div>'>>}}}\
<</message>>

<<back>>


:: ptUpdate
Number of seconds since you started playing: <<= Math.trunc(playTime('ms') / 1000)>>
Number of milliseconds: <<= playTime('ms')>>
Current play time: <<=playTime()>>


:: The Fullscreen Macro
The {{{<<fullscreen>>}}} macro lets you make your game fullscreen, but it requires some sort of user interaction.

<<link 'MAKE IT BIG'>>
	<<fullscreen>>
<</link>>

<<message 'View this code.'>>\
	{{{<<link 'MAKE IT BIG'>>}}}
	<<tab>>{{{<<fullscreen>>}}}
	{{{<</link>>}}}\
<</message>>

You can use the {{{<<fullscreenlink>>}}} macro to save yourself from some of that typing.

<<fullscreenlink 'MAKE IT BIG.'>>

<<message 'View this code.'>>\
	{{{<<fullscreenlink 'MAKE IT BIG.'>>}}}\
<</message>>


:: testingInv
You can also use the {{{<<transfer>>}}} macro to move a list of items from one inventory to another.  If any items in the list can't be found, no error will be raised, but the item also won't appear in the new inventory.

<<if $playerInv.hasAll('blue hedgehog', 'italian plumber')>>\
	@@#goaway;<<link 'Toss the Sonic and Mario back into the last passage.'>>
		<<replace '#goaway'>><</replace>>
		<<transfer '$playerInv' '$container' 'blue hedgehog' 'italian plumber'>>
	<</link>>@@\
<</if>>

[[Return|previous()]]

Click the link above and then take the return link to see what happens!

<<message 'View this code.'>>\
	{{{<<if $playerInv.hasAll('blue hedgehog', 'italian plumber')>>\}}}
	<<tab>>{{{@@#goaway;<<link 'Toss the Sonic and Mario back into the last passage.'>>}}}
	<<tab>><<tab>>{{{<<replace '#goaway'>><</replace>>}}}
	<<tab>><<tab>>{{{<<transfer '$playerInv' '$container' 'blue hedgehog' 'italian plumber'>>}}}
	<<tab>>{{{<</link>>@@\}}}
	{{{<</if>>}}}\
<</message>>

[[Next.|invJS-API]]


:: StoryInit
<<newinventory '$playerInv'>>
<<pickup '$playerInv' 'blue hedgehog' 'italian plumber'>>

<<newinventory '$container'>>
<<pickup '$container' 'a rusty key' 'a cellphone'>>


:: The Message Macro
The {{{<<message>>}}} macro lets you create toggleable messages.  We've been using it throughout this demo for the 'view this code' links.

<span id='ex'>\
<<message>>Blah<</message>>

<<message 'Number'>>\
	<<print Date.now()>>\
<</message>>
</span>
<<message 'View this code.'>>\
	{{{<<message>>Blah<</message>>}}}

	{{{<<message 'Number'>>\}}}
	<<tab>>{{{<<print Date.now()>>\}}}
	{{{<</message>>}}}\
<</message>>


:: The Operations System
The operations system adds a dice-roller and a ChoiceScript-style 'fairmath' system to SugarCube.  Let's do some math.

There are a number of ways use the dice roller; check out the code below.

Dice Roll: @@#dice-result;0@@

<<link 'Roll 3d6 + 1'>>
	<<replace '#dice-result'>>\
		<<print dice(3, 6) + 1>>\
	<</replace>>
<</link>>
<<link 'Roll 6d4 - 5'>>
	<<replace '#dice-result'>>\
		<<print dice('6d4') - 5>>\
	<</replace>>
<</link>>
<<link 'Roll 1d20 + 5'>>
	<<replace '#dice-result'>>\
		<<print dice('1d20 + 5')>>\
	<</replace>>
<</link>>
<<link 'Roll 2d6 + 10'>>
	<<replace '#dice-result'>>\
		<<print (2).d(6) + 10>>\
	<</replace>>
<</link>>

<<message 'View this code.'>>\
	{{{<<link 'Roll 3d6 + 1'>>}}}
	<<tab>>{{{<<replace '#dice-result'>>\}}}
	<<tab>><<tab>>{{{<<print dice(3, 6) + 1>>\}}}
	<<tab>>{{{<</replace>>}}}
	{{{<</link>>}}}
	{{{<<link 'Roll 6d4 - 5'>>}}}
	<<tab>>{{{<<replace '#dice-result'>>\}}}
	<<tab>><<tab>>{{{<<print dice('6d4') - 5>>\}}}
	<<tab>>{{{<</replace>>}}}
	{{{<</link>>}}}
	{{{<<link 'Roll 1d20 + 5'>>}}}
	<<tab>>{{{<<replace '#dice-result'>>\}}}
	<<tab>><<tab>>{{{<<print dice('1d20 + 5')>>\}}}
	<<tab>>{{{<</replace>>}}}
	{{{<</link>>}}}
	{{{<<link 'Roll 2d6 + 10'>>}}}
	<<tab>>{{{<<replace '#dice-result'>>\}}}
	<<tab>><<tab>>{{{<<print (2).d(6) + 10>>\}}}
	<<tab>>{{{<</replace>>}}}
	{{{<</link>>}}}
<</message>>

There's also a few ways to use the fairmath system.  We'll show two here:

<<print (80).fm(-25)>>
<<print Math.fm(19, +40)>>

<<message 'View this code.'>>\
	{{{<<print (80).fm(-25)>>}}}
	{{{<<print Math.fm(19, +40)>>}}}
<</message>>


:: The Play Time System
This is the amount of time you've spent poking around in this demo so far:

<<nobr>>
	@@#time;<<playtime format>>@@
	<<repeat 1s>>
		<<replace '#time'>>\
			<<playtime format>>\
		<</replace>>
	<</repeat>>
<</nobr>>

<<message 'View this code.'>>\
	{{{<<nobr>>}}}
	<<tab>>{{{@@#time;<<playtime format>>@@}}}
	<<tab>>{{{<<repeat 1s>>}}}
	<<tab>><<tab>>{{{<<replace '#time'>>\}}}
	<<tab>><<tab>><<tab>>{{{<<playtime format>>\}}}
	<<tab>><<tab>>{{{<</replace>>}}}
	<<tab>>{{{<</repeat>>}}}
	{{{<</nobr>>}}}\
<</message>>

Check back to see it go up.

The play time gets saved in save games and can be configured in a variety of ways, including not counting on certain passages, changing the display, and getting specific time infromation.

The macro itself is generally static, but it can be animated with a {{{<<repeat>>}}} macro or similar.

@@#ptUp;<<include 'ptUpdate'>>@@
<<button 'Update'>>
	<<replace '#ptUp'>>\
		<<include 'ptUpdate'>>\
	<</replace>>
<</button>>

<<message 'View this code.'>>\
	{{{@@#ptUp;<<include 'ptUpdate'>>@@}}}
	{{{<<button 'Update'>>}}}
	<<tab>>{{{<<replace '#ptUp'>>\}}}
	<<tab>><<tab>>{{{<<include 'ptUpdate'>>\}}}
	<<tab>>{{{<</replace>>}}}
	{{{<</button>>}}}

	{{{::ptUpdate}}}
	{{{Number of seconds since you started playing: <<= Math.trunc(playTime('ms') / 1000)>>}}}
	{{{Number of milliseconds: <<= playTime('ms')>>}}}
	{{{Current play time: <<=playTime()>>}}}\
<</message>>


:: The Notify Macro
The {{{<<notify>>}}} macro shows a brief message on the screen and then leaves.  You can alter it's appearance using the id {{{#notify}}} in the shylesheet.  Because they depend on the DOM, notifications won't work on the first passage of a story unless paired with interaction.

Letting the player mash on notification links, or recieve multiple notifications at once, may lead to buggy behavior.  In general, I would not tie notifications to player action, but rather to certain individual events or passages.

@@#links1;\
<<link 'Click to unlock an achievement.'>>
	<<replace '#links1'>>\
		Click to unlock an achievement.\
	<</replace>>
	<<notify>>Achievement unlocked.<</notify>>
<</link>>\
@@

<<message 'View this code.'>>\
	{{{@@#links1;\}}}
	{{{<<link 'Click to unlock an achievement.'>>}}}
	<<tab>>{{{<<replace '#links1'>>\}}}
	<<tab>><<tab>>{{{Click to unlock an achievement.\}}}
	<<tab>>{{{<</replace>>}}}
	<<tab>>{{{<<notify>>Achievement unlocked.<</notify>>}}}
	{{{<</link>>\}}}
	{{{@@\}}}
<</message>>

You can make notifications last longer, or attach classes to them for different stylings on different notifications.

@@#links2;\
<<link 'Click to unlock an achievement.'>>
	<<replace '#links2'>>\
		Click to unlock an achievement.\
	<</replace>>
	<<notify 500 'big'>>Achievement unlocked.<</notify>>
<</link>>\
@@

<<message 'View this code.'>>\
	{{{@@#links2;\}}}
	{{{<<link 'Click to unlock an achievement.'>>}}}
	<<tab>>{{{<<replace '#links2'>>\}}}
	<<tab>><<tab>>{{{Click to unlock an achievement.\}}}
	<<tab>>{{{<</replace>>}}}
	<<tab>>{{{<<notify 500 'big'>>Achievement unlocked.<</notify>>}}}
	{{{<</link>>\}}}
	{{{@@\}}}
<</message>>


:: containerExample
This room contains the following items:

<<linkedinventory 'Take' '$container' '$playerInv'>>

<<link 'View your inventory.'>>
	<<dialog 'Inventory'>>\
		<<inventory '$playerInv'>>\
	<</dialog>>
<</link>>

<<message 'View this code.'>>\
	{{{<<linkedinventory 'Take' '$container' '$playerInv'>>}}}

	{{{<<link 'View your inventory.'>>}}}
	<<tab>>{{{<<dialog 'Inventory'>>\}}}
	<<tab>><<tab>>{{{<<inventory '$playerInv'>>\}}}
	<<tab>>{{{<</dialog>>}}}
	{{{<</link>>}}}\
<</message>>

You can use the {{{<<linkedinventory>>}}} macro to display a list of inventory items along with a link.  You determine the link name.  What the link does depends on the macros arguments; if two inventories are given to the macro, clicking the link moves the item in question from the first inventory listed into the second inventory.  If only one inventory is listed, clicking the link will just remove the item from the indicated inventory.

[[Next.|testingInv]]


:: The TypeSim Macro
You need to send an email to your boss!  Better get typing:

<<typesim "Hey boss, sorry I was late today.  It won't happen again, ever, I promise.  Please don't fire me!">>That's all there is to it!<</typesim>>

//Warning: Watch what you do with the event macros when you use interactive elements!//

<<message 'View this code.'>>\
	{{{<<typesim "Hey boss, sorry I was late today.  It won't happen again, ever, I promise.  Please don't fire me!">>That's all there is to it!<</typesim>>}}}\
<</message>>


:: Consumables
Coming soon!

<<back>>


:: The Event Macros [event-test]
This page is riddled with events.  Try pressing spacebar, holding shift down, and pressing backspace to see what happens!\

<<silently>>

<<event 'keyup' 'body.event-test'>>
<<which 32 8>>
	<<run $('#passages').hide().delay(250).fadeIn();>>
<<which 16>>
	<<removeclass '#ui-bar' 'stowed'>>

<</event>>

<<event 'keydown' 'body.event-test'>>
<<which 16>>
	<<addclass '#ui-bar' 'stowed'>>
<</event>>

<<endsilently>>\

<<message 'View this code.'>>\
	{{{<<event 'keyup' 'body.event-test'>>}}}
	{{{<<which 16>>}}}
	<<tab>>{{{<<removeclass '#ui-bar' 'stowed'>>}}}
	{{{<<which 32 8>>}}}
	<<tab>>{{{<<run $('#passages').hide().delay(250).fadeIn();>>}}}
	{{{<</event>>}}}

	{{{<<event 'keydown' 'body.event-test'>>}}}
	{{{<<which 16>>}}}
	<<tab>>{{{<<addclass '#ui-bar' 'stowed'>>}}}
	{{{<</event>>}}}\
<</message>>

Once event code is added to the game, it's essentially permanent.  This means that using selectors to target page elements (we used tags and the {{{<body>}}} element in the examples), and using StoryInit to set things up, is the best way to use events.  You can, obviously, remove the event listeners via JavaScript/jQuery if you want to, however.


:: The Insert Macro
Coming soon!

<<back>>


:: Simple Inventory
When you started up this demo, an inventory was created for you, and a few items were slipped into it:

<<message 'View this code.'>>\
	{{{::StoryInit}}}
	{{{<<newinventory '$playerInv'>>}}}
	{{{<<pickup '$playerInv' 'blue hedgehog' 'italian plumber'>>}}}\
<</message>>

@@#ex;<<message 'Click here to view your inventory'>>\
	<<inventory '$playerInv' ', '>>\
<</message>>@@

<<message 'View this code.'>>\
	{{{<<message 'Click here to view your inventory'>>\}}}
	<<tab>>{{{<<inventory '$playerInv' ', '>>\}}}
	{{{<</message>>}}}
<</message>>

There's a lot more that we can do with the inventory, though.

[[Next.|droppingAndPickingUp]]


:: droppingAndPickingUp [inv]
<<if not $playerInv.has('lighter')>>\
	There's a cigarette lighter on the floor here...
	
	<<link [[Pick it up?|droppingAndPickingUp]]>>
		<<pickup '$playerInv' 'lighter'>>
	<</link>>
<<else>>\
	There's nothing here...

	<<link [[Drop the lighter?|droppingAndPickingUp]]>>
		<<drop '$playerInv' 'lighter'>>
	<</link>>
<</if>>

<<message 'View this code.'>>\
	{{{<<if not $playerInv.has('lighter')>>\}}}
	<<tab>>{{{There's a cigarette lighter on the floor here...}}}
	
	<<tab>>{{{<<link [[Pick it up?|droppingAndPickingUp]]>>}}}
	<<tab>><<tab>>{{{<<pickup 'lighter'>>}}}
	<<tab>>{{{<</link>>}}}
	{{{<<else>>\}}}
	<<tab>>{{{There's nothing here...}}}

	<<tab>>{{{<<link [[Drop the lighter?|droppingAndPickingUp]]>>}}}
	<<tab>><<tab>>{{{<<drop 'lighter'>>}}}
	<<tab>>{{{<</link>>}}}
	{{{<</if>>}}}

	{{{::PassageFooter}}}
	{{{<<if tags().includes('inv')>>\}}}
	<<tab>>{{{@@#inventory;}}}
	<<tab>><<tab>>{{{<<inventory '$playerInv'>>\}}}
	<<tab>>{{{@@}}}
	{{{<</if>>}}}\
<</message>>

We can check the inventory with the JavaScript method {{{<inventory>.has()}}} for a single item or a list of items.  If any one of the items in the list is in the invetnory, the method call returns true.  If we need to make sure the player has all of the required items, we can instead use the {{{<inventory>.hasAll()}}} method.

We can add items to the inventory using the {{{<<pickup>>}}} macro, and drop them with the {{{<<drop>>}}} macro.  We can also completely clear out the inventory using the {{{<<dropall>> macro}}}.

[[Next.|containerExample]]


:: Cycles
Coming soon!

<<back>>


